Event_handler		pipeline_interfaces.h (D:\wangfeng\Virtual_Machines\share\mysql-boost-8.0.23\mysql-8.0.23\plugin\group_replication\include)	530
	Applier_handler		applier_handler.h (D:\wangfeng\Virtual_Machines\share\mysql-boost-8.0.23\mysql-8.0.23\plugin\group_replication\include\handlers)	32
	Certification_handler		certification_handler.h (D:\wangfeng\Virtual_Machines\share\mysql-boost-8.0.23\mysql-8.0.23\plugin\group_replication\include\handlers)	31
	Event_cataloger		event_cataloger.h (D:\wangfeng\Virtual_Machines\share\mysql-boost-8.0.23\mysql-8.0.23\plugin\group_replication\include\handlers)	30




int Applier_module::applier_thread_handle()
void Certifier_broadcast_thread::dispatcher()



#certifier.cc 广播gtid_executed和流控处理
void Certifier_broadcast_thread::dispatcher() {
  DBUG_TRACE;

  // Thread context operations
  THD *thd = new THD;
  my_thread_init();
  thd->set_new_thread_id();
  thd->thread_stack = (char *)&thd;
  thd->store_globals();
  global_thd_manager_add_thd(thd);
  broadcast_thd = thd;

  mysql_mutex_lock(&broadcast_run_lock);
  broadcast_thd_state.set_running();
  mysql_cond_broadcast(&broadcast_run_cond);
  mysql_mutex_unlock(&broadcast_run_lock);

  while (!aborted) {
    // Broadcast Transaction identifiers every 30 seconds
    if (broadcast_counter % 30 == 0) {
      applier_module->get_pipeline_stats_member_collector()
          ->set_send_transaction_identifiers();
    }

    applier_module->run_flow_control_step();

    if (broadcast_counter % broadcast_gtid_executed_period == 0)
      broadcast_gtid_executed();

    mysql_mutex_lock(&broadcast_dispatcher_lock);
    if (aborted) {
      mysql_mutex_unlock(&broadcast_dispatcher_lock); /* purecov: inspected */
      break;                                          /* purecov: inspected */
    }
    struct timespec abstime;
    set_timespec(&abstime, 1);
    mysql_cond_timedwait(&broadcast_dispatcher_cond, &broadcast_dispatcher_lock,
                         &abstime);
    mysql_mutex_unlock(&broadcast_dispatcher_lock);

    broadcast_counter++;
  }

  Gcs_interface_factory::cleanup_thread_communication_resources(
      Gcs_operations::get_gcs_engine());

  thd->release_resources();
  global_thd_manager_remove_thd(thd);
  delete thd;

  mysql_mutex_lock(&broadcast_run_lock);
  broadcast_thd_state.set_terminated();
  mysql_cond_broadcast(&broadcast_run_cond);
  mysql_mutex_unlock(&broadcast_run_lock);

  my_thread_end();
  my_thread_exit(nullptr);
}