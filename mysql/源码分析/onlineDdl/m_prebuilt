prepare_inplace_alter_table
inplace_alter_table
commit_inplace_alter_table
row_merge_build_indexes



  /** Save CPU time with prebuilt/cached data structures */
  row_prebuilt_t *m_prebuilt;


  struct row_prebuilt_t {
  ulint magic_n;               /*!< this magic number is set to
                               ROW_PREBUILT_ALLOCATED when created,
                               or ROW_PREBUILT_FREED when the
                               struct has been freed */
  dict_table_t *table;         /*!< Innobase table handle */
  dict_index_t *index;         /*!< current index for a search, if
                               any */
  trx_t *trx;                  /*!< current transaction handle */
  unsigned sql_stat_start : 1; /*!< TRUE when we start processing of
                              an SQL statement: we may have to set
                              an intention lock on the table,
                              create a consistent read view etc. */
  unsigned clust_index_was_generated : 1;
  /*!< if the user did not define a
  primary key in MySQL, then Innobase
  automatically generated a clustered
  index where the ordering column is
  the row id: in this case this flag
  is set to TRUE */
  unsigned index_usable : 1;               /*!< caches the value of
                                           index->is_usable(trx) */
  unsigned read_just_key : 1;              /*!< set to 1 when MySQL calls
                                           ha_innobase::extra with the
                                           argument HA_EXTRA_KEYREAD; it is enough
                                           to read just columns defined in
                                           the index (i.e., no read of the
                                           clustered index record necessary) */
  unsigned used_in_HANDLER : 1;            /*!< TRUE if we have been using this
                                         handle in a MySQL HANDLER low level
                                         index cursor command: then we must
                                         store the pcur position even in a
                                         unique search from a clustered index,
                                         because HANDLER allows NEXT and PREV
                                         in such a situation */
  unsigned template_type : 2;              /*!< ROW_MYSQL_WHOLE_ROW,
                                           ROW_MYSQL_REC_FIELDS,
                                           ROW_MYSQL_DUMMY_TEMPLATE, or
                                           ROW_MYSQL_NO_TEMPLATE */
  unsigned n_template : 10;                /*!< number of elements in the
                                           template */
  unsigned null_bitmap_len : 10;           /*!< number of bytes in the SQL NULL
                                        bitmap at the start of a row in the
                                        MySQL format */
  unsigned need_to_access_clustered : 1;   /*!< if we are fetching
                               columns through a secondary index
                               and at least one column is not in
                               the secondary index, then this is
                               set to TRUE */
  unsigned templ_contains_blob : 1;        /*!< TRUE if the template contains
                                     a column with DATA_LARGE_MTYPE(
                                     get_innobase_type_from_mysql_type())
                                     is TRUE;
                                     not to be confused with InnoDB
                                     externally stored columns
                                     (VARCHAR can be off-page too) */
  unsigned templ_contains_fixed_point : 1; /*!< TRUE if the
                              template contains a column with
                              DATA_POINT. Since InnoDB regards
                              DATA_POINT as non-BLOB type, the
                              templ_contains_blob can't tell us
                              if there is DATA_POINT */

  /** 1 if extra(HA_EXTRA_INSERT_WITH_UPDATE) was requested, which happens
  when ON DUPLICATE KEY UPDATE clause is present, 0 otherwise */
  unsigned on_duplicate_key_update : 1;

  /** 1 if extra(HA_EXTRA_WRITE_CAN_REPLACE) was requested, which happen when
  REPLACE is done instead of regular INSERT, 0 otherwise */
  unsigned replace : 1;

  /** template used to transform rows fast between MySQL and Innobase formats;
  memory for this template is not allocated from 'heap' */
  mysql_row_templ_t *mysql_template;

  /** memory heap from which these auxiliary structures are allocated when
  needed */
  mem_heap_t *heap;

  /** memory heap from which innodb_api_buf is allocated per session */
  mem_heap_t *cursor_heap;

  /** Innobase SQL insert node used to perform inserts to the table */
  ins_node_t *ins_node;

  /** buffer for storing data converted to the Innobase format from the MySQL
  format */
  byte *ins_upd_rec_buff;

  /* buffer for converting data format for multi-value virtual columns */
  multi_value_data *mv_data;
  const byte *default_rec; /*!< the default values of all columns
                           (a "default row") in MySQL format */
  ulint hint_need_to_fetch_extra_cols;
  /*!< normally this is set to 0; if this
  is set to ROW_RETRIEVE_PRIMARY_KEY,
  then we should at least retrieve all
  columns in the primary key; if this
  is set to ROW_RETRIEVE_ALL_COLS, then
  we must retrieve all columns in the
  key (if read_just_key == 1), or all
  columns in the table */
  upd_node_t *upd_node;   /*!< Innobase SQL update node used
                          to perform updates and deletes */
  trx_id_t trx_id;        /*!< The table->def_trx_id when
                          ins_graph was built */
  que_fork_t *ins_graph;  /*!< Innobase SQL query graph used
                          in inserts. Will be rebuilt on
                          trx_id or n_indexes mismatch. */
  que_fork_t *upd_graph;  /*!< Innobase SQL query graph used
                          in updates or deletes */
  btr_pcur_t *pcur;       /*!< persistent cursor used in selects
                          and updates */
  btr_pcur_t *clust_pcur; /*!< persistent cursor used in
                          some selects and updates */
  que_fork_t *sel_graph;  /*!< dummy query graph used in
                          selects */
  dtuple_t *search_tuple; /*!< prebuilt dtuple used in selects */

  /** prebuilt dtuple used in selects where the end of range is known */
  dtuple_t *m_stop_tuple;

  /** Set to true in row_search_mvcc when a row matching exactly the length and
  value of stop_tuple was found, so that the next iteration of row_search_mvcc
  knows it can simply return DB_RECORD_NOT_FOUND. If true, then for sure, at
  least one such matching row was seen. If false, it might be false negative, as
  not all control paths lead to setting this field to true in case a matching
  row is visited. */
  bool m_stop_tuple_found;

 private:
  /** Set to true iff we are inside read_range_first() or read_range_next() */
  bool m_is_reading_range;

 public:
  bool is_reading_range() const { return m_is_reading_range; }

  class row_is_reading_range_guard_t : private ut::bool_scope_guard_t {
   public:
    explicit row_is_reading_range_guard_t(row_prebuilt_t &prebuilt)
        : ut::bool_scope_guard_t(prebuilt.m_is_reading_range) {}
  };

  row_is_reading_range_guard_t get_is_reading_range_guard() {
    /* We implement row_is_reading_range_guard_t as a simple bool_scope_guard_t
    because we trust that scopes are never nested and thus we don't need to
    count their "openings" and "closings", so we assert that.*/
    ut_ad(!m_is_reading_range);
    return row_is_reading_range_guard_t(*this);
  }

  byte row_id[DATA_ROW_ID_LEN];
  /*!< if the clustered index was
  generated, the row id of the
  last row fetched is stored
  here */
  doc_id_t fts_doc_id;          /* if the table has an FTS index on
                                it then we fetch the doc_id.
                                FTS-FIXME: Currently we fetch it always
                                but in the future we must only fetch
                                it when FTS columns are being
                                updated */
  dtuple_t *clust_ref;          /*!< prebuilt dtuple used in
                                sel/upd/del */
  ulint select_lock_type;       /*!< LOCK_NONE, LOCK_S, or LOCK_X */
  enum select_mode select_mode; /*!< SELECT_ORDINARY,
                                SELECT_SKIP_LOKCED, or SELECT_NO_WAIT */
  ulint row_read_type;          /*!< ROW_READ_WITH_LOCKS if row locks
                                should be the obtained for records
                                under an UPDATE or DELETE cursor.
                                If trx_t::allow_semi_consistent()
                                returns true, this can be set to
                                ROW_READ_TRY_SEMI_CONSISTENT, so that
                                if the row under an UPDATE or DELETE
                                cursor was locked by another
                                transaction, InnoDB will resort
                                to reading the last committed value
                                ('semi-consistent read').  Then,
                                this field will be set to
                                ROW_READ_DID_SEMI_CONSISTENT to
                                indicate that.	If the row does not
                                match the WHERE condition, MySQL will
                                invoke handler::unlock_row() to
                                clear the flag back to
                                ROW_READ_TRY_SEMI_CONSISTENT and
                                to simply skip the row.	 If
                                the row matches, the next call to
                                row_search_for_mysql() will lock
                                the row.
                                This eliminates lock waits in some
                                cases; note that this breaks
                                serializability. */

  enum {
    LOCK_PCUR,
    LOCK_CLUST_PCUR,
    LOCK_COUNT,
  };

  bool new_rec_lock[LOCK_COUNT]; /*!< normally false; if
                        session is using READ COMMITTED or READ UNCOMMITTED
                        isolation level, set in row_search_for_mysql() if we set
                        a new record lock on the secondary or clustered index;
                        this is used in row_unlock_for_mysql() when releasing
                        the lock under the cursor if we determine after
                        retrieving the row that it does not need to be locked
                        ('mini-rollback')
                        [LOCK_PCUR] corresponds to pcur, the first index we
                        looked up (can be secondary or clustered!)

                        [LOCK_CLUST_PCUR] corresponds to clust_pcur, which if
                        used at all, is always the clustered index.

                        The meaning of these booleans is:
                        true = we've created a rec lock, which we might
                               release as we "own" it
                        false = we should not release any lock for this
                               index as we either reused some existing
                               lock, or there is some other reason, we
                               should keep it
                        */
  ulint mysql_prefix_len;        /*!< byte offset of the end of
                                 the last requested column */
  ulint mysql_row_len;           /*!< length in bytes of a row in the
                                 MySQL format */
  ulint n_rows_fetched;          /*!< number of rows fetched after
                                 positioning the current cursor */
  ulint fetch_direction;         /*!< ROW_SEL_NEXT or ROW_SEL_PREV */

  byte *fetch_cache[MYSQL_FETCH_CACHE_SIZE];
  /*!< a cache for fetched rows if we
  fetch many rows from the same cursor:
  it saves CPU time to fetch them in a
  batch; we reserve mysql_row_len
  bytes for each such row; these
  pointers point 4 bytes past the
  allocated mem buf start, because
  there is a 4 byte magic number at the
  start and at the end */
  ibool keep_other_fields_on_keyread; /*!< when using fetch
                        cache with HA_EXTRA_KEYREAD, don't
                        overwrite other fields in mysql row
                        row buffer.*/
  ulint fetch_cache_first;            /*!< position of the first not yet
                                    fetched row in fetch_cache */
  ulint n_fetch_cached;               /*!< number of not yet fetched rows
                                      in fetch_cache */
  mem_heap_t *blob_heap;              /*!< in SELECTS BLOB fields are copied
                                      to this heap */
  mem_heap_t *old_vers_heap;          /*!< memory heap where a previous
                                      version is built in consistent read */
  bool in_fts_query;                  /*!< Whether we are in a FTS query */
  bool fts_doc_id_in_read_set;        /*!< true if table has externally
                              defined FTS_DOC_ID coulmn. */
  /*----------------------*/
  ulonglong autoinc_last_value;
  /*!< last value of AUTO-INC interval */
  ulonglong autoinc_increment; /*!< The increment step of the auto
                             increment column. Value must be
                             greater than or equal to 1. Required to
                             calculate the next value */
  ulonglong autoinc_offset;    /*!< The offset passed to
                               get_auto_increment() by MySQL. Required
                               to calculate the next value */
  dberr_t autoinc_error;       /*!< The actual error code encountered
                               while trying to init or read the
                               autoinc value from the table. We
                               store it here so that we can return
                               it to MySQL */
  /*----------------------*/
  bool idx_cond;         /*!< True if index condition pushdown
                         is used, false otherwise. */
  ulint idx_cond_n_cols; /*!< Number of fields in idx_cond_cols.
                         0 if and only if idx_cond == false. */
  /*----------------------*/
  unsigned innodb_api : 1;     /*!< whether this is a InnoDB API
                               query */
  const rec_t *innodb_api_rec; /*!< InnoDB API search result */
  void *innodb_api_buf;        /*!< Buffer holding copy of the physical
                               Innodb API search record */
  ulint innodb_api_rec_size;   /*!< Size of the Innodb API record */
  /*----------------------*/

  /*----------------------*/
  rtr_info_t *rtr_info; /*!< R-tree Search Info */
  /*----------------------*/

  ulint magic_n2; /*!< this should be the same as
                  magic_n */

  bool ins_sel_stmt; /*!< if true then ins_sel_statement. */

  innodb_session_t *session; /*!< InnoDB session handler. */
  byte *srch_key_val1;       /*!< buffer used in converting
                             search key values from MySQL format
                             to InnoDB format.*/
  byte *srch_key_val2;       /*!< buffer used in converting
                             search key values from MySQL format
                             to InnoDB format.*/
  uint srch_key_val_len;     /*!< Size of search key */
  /** Disable prefetch. */
  bool m_no_prefetch;

  /** true, if server has called ha_extra(HA_EXTRA_NO_READ_LOCKING) */
  bool no_read_locking;

  /** true, if we were asked to skip AUTOINC locking for the table. */
  bool no_autoinc_locking;

  /** Return materialized key for secondary index scan */
  bool m_read_virtual_key;

  /** Whether this is a temporary(intrinsic) table read to keep the position
  for this MySQL TABLE object */
  bool m_temp_read_shared;

  /** Whether tree modifying operation happened on a temporary (intrinsic)
  table index tree. In this case, it could be split, but no shrink. */
  bool m_temp_tree_modified;

  /** The MySQL table object */
  TABLE *m_mysql_table;

  /** The MySQL handler object. */
  ha_innobase *m_mysql_handler;

  /** limit value to avoid fts result overflow */
  ulonglong m_fts_limit;

  /** True if exceeded the end_range while filling the prefetch cache. */
  bool m_end_range;

  /** Undo information for LOB mvcc */
  lob::undo_vers_t m_lob_undo;

  lob::undo_vers_t *get_lob_undo() { return (&m_lob_undo); }

  void lob_undo_reset() { m_lob_undo.reset(); }

  /** Can a record buffer or a prefetch cache be utilized for prefetching
  records in this scan?
  @retval true   if records can be prefetched
  @retval false  if records cannot be prefetched */
  bool can_prefetch_records() const;

  /** Determines if the query is REPLACE or ON DUPLICATE KEY UPDATE in which
  case duplicate values should be allowed (and further processed) instead of
  causing an error.
  @return true iff duplicated values should be allowed */
  bool allow_duplicates() { return (replace || on_duplicate_key_update); }

 private:
  /** A helper function for init_search_tuples_types() which prepares the shape
  of the tuple to match the index
  @param[in]  tuple   this->search_tuple or this->m_stop_tuple */
  void init_tuple_types(dtuple_t *tuple) {
    dtuple_set_n_fields(tuple, index->n_fields);
    dict_index_copy_types(tuple, index, index->n_fields);
  }

 public:
  /** Initializes search_tuple and m_stop_tuple shape so they match the index */
  void init_search_tuples_types() {
    init_tuple_types(search_tuple);
    init_tuple_types(m_stop_tuple);
  }

  /** Resets both search_tuple and m_stop_tuple */
  void clear_search_tuples() {
    dtuple_set_n_fields(search_tuple, 0);
    dtuple_set_n_fields(m_stop_tuple, 0);
  }

  /** @return true iff the operation can skip concurrency ticket. */
  bool skip_concurrency_ticket() const;

  /** It is unsafe to copy this struct, and moving it would be non-trivial,
  because we want to keep in sync with row_is_reading_range_guard_t. Therefore
  it is much safer/easier to just forbid such operations.  */
  row_prebuilt_t(row_prebuilt_t const &) = delete;
  row_prebuilt_t &operator=(row_prebuilt_t const &) = delete;
  row_prebuilt_t &operator=(row_prebuilt_t &&) = delete;
  row_prebuilt_t(row_prebuilt_t &&) = delete;
}